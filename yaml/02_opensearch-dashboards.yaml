apiVersion: v1
kind: Service
metadata:
  name: dashboards
  namespace: kube-logging
  labels:
    app: opensearch-dashboards
  annotations:
    traefik.ingress.kubernetes.io/service.serverstransport: tmaxcloud@file
spec:
  type: ClusterIP
  ports:
  - port: 5601
    name: https
    protocol: TCP
    targetPort: 5601
  selector:
    app: opensearch-dashboards
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  namespace: kube-logging
  labels:
    app: opensearch-dashboards
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opensearch-dashboards
  template:
    metadata:
      labels:
        app: opensearch-dashboards
    spec:
      serviceAccount: opensearch-service-account
      #{RS_PLUGIN_INITCONTAINER} 
      containers:
      - name: dashboards
        image: docker.io/opensearchproject/opensearch-dashboards:{DASHBOARD_VERSION}
        imagePullPolicy: "IfNotPresent"
        securityContext:
          privileged: true
        command: ["/bin/bash", "-c", "/usr/share/opensearch-dashboards/settings.sh && /usr/share/opensearch-dashboards/opensearch-dashboards-docker-entrypoint.sh"]
        resources:
          limits:
            cpu: 500m
            memory: 1000Mi
          requests:
            cpu: 500m
            memory: 1000Mi
        env:
          - name: OPENSEARCH_HOSTS
            value: "https://opensearch.kube-logging.svc:9200"
          - name: SERVER_HOST
            value: "0.0.0.0"
          - name: NODE_TLS_REJECT_UNAUTHORIZED
            value: "0"
        ports:
        - containerPort: 5601
          name: https
          protocol: TCP 
        volumeMounts:
        - name: config
          mountPath: /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
          subPath: opensearch_dashboards.yml
        - name: settings
          mountPath: /usr/share/opensearch-dashboards/settings.sh
          subPath: settings.sh
        - name: index-policy
          mountPath: /usr/share/opensearch-dashboards/index-policy.json
          subPath: index-policy.json
        - name: dashboards-cert
          mountPath: /usr/share/opensearch-dashboards/config/certificates
          readOnly: true
        #{RS_PLUGIN_VOLUMEMOUNT}
      volumes:
      - name: config
        configMap:
          name: opensearch-dashboards-config
      - name: settings
        configMap:
          defaultMode: 0700
          name: os-policy
          items:
          - key: settings.sh
            path: settings.sh
      - name: index-policy
        configMap:
          name: os-policy
          items:
          - key: index-policy.json
            path: index-policy.json
      - name: dashboards-cert
        secret:
          secretName: dashboards-secret
      #{RS_PLUGIN_VOLUME}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opensearch-dashboards-config
  namespace: kube-logging
data:
  opensearch_dashboards.yml: |
    server.name: dashboards
    server.host: "0.0.0.0"

    server.ssl.enabled: true
    server.ssl.certificate: /usr/share/opensearch-dashboards/config/certificates/tls.crt
    server.ssl.key: /usr/share/opensearch-dashboards/config/certificates/tls.key
    opensearch.hosts: ["https://opensearch.kube-logging.svc:9200"]
    opensearch.username: admin
    opensearch.password: admin
    
    opensearch.ssl.certificateAuthorities:
      [/usr/share/opensearch-dashboards/config/certificates/ca.crt]
    opensearch.ssl.verificationMode: full
    opensearch.requestHeadersWhitelist: ["Authorization","security_tenant", "securitytenant"]
    opensearch_security.multitenancy.enabled: true
    opensearch_security.multitenancy.tenants.enable_global: true
    opensearch_security.multitenancy.tenants.enable_private: true
    opensearch_security.multitenancy.tenants.preferred: ["Private", "Global"]
    opensearch_security.multitenancy.enable_filter: false
    
    opensearch_security.auth.type: "openid"
    opensearch_security.openid.connect_url: "https://{HYPERAUTH_URL}/auth/realms/tmax/.well-known/openid-configuration"
    opensearch_security.openid.client_id: "opensearch"
    opensearch_security.openid.client_secret: "{OPENSEARCH_CLIENT_SECRET}"
    opensearch_security.openid.base_redirect_url: "https://opensearch-dashboard.{CUSTOM_DOMAIN_NAME}"
    opensearch_security.openid.verify_hostnames: false
    opensearch_security.cookie.secure: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: os-policy
  namespace: kube-logging
  labels:
    app: opensearch-dashboards
data:
  settings.sh: |
    #{RS_PLUGIN_SETTING}
    curl -XPUT -u admin:admin -k -H 'Content-Type: application/json' 'https://opensearch.kube-logging.svc:9200/_plugins/_ism/policies/watch-history-ilm-policy' -d@/usr/share/opensearch-dashboards/index-policy.json
  index-policy.json: |
    {
      "policy": {
        "description": "Delete after 7 days from creation",
        "default_state": "hot",
        "states": [
          {
            "name": "hot",
            "actions": [],
            "transitions": [
              {
                "state_name": "delete",
                "conditions": {
                  "min_index_age": "7d"
                }
              }
            ]
          },
          {
            "name": "delete",
            "actions": [
              {
                "delete": {}
              }
            ],
            "transitions": []
          }
        ],
        "ism_template": {
           "index_patterns": ["logstash-*"],
           "priority": 100
        }
      }
    }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    ingress.tmaxcloud.org/name: opensearch-dashboards
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    cert-manager.io/cluster-issuer: tmaxcloud-issuer
  name: dashboards
  namespace: kube-logging
spec:
  ingressClassName: tmax-cloud
  rules:
  - host: opensearch-dashboard.{CUSTOM_DOMAIN_NAME}
    http:
      paths:
      - backend:
          service:
            name: dashboards
            port:
              number: 5601
        path: /
        pathType: Prefix
  #{RS_PLUGIN_INGRESS}
  tls:
  - hosts:
    - opensearch-dashboard.{CUSTOM_DOMAIN_NAME}
    #-
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dashboards-cert
  namespace: kube-logging
spec:
  secretName: dashboards-secret
  commonName: "dashboards"
  privateKey:
    algorithm: RSA
    encoding: PKCS8
    size: 2048
  isCA: false
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  dnsNames:
    - "tmax-cloud"
    - "dashboards.kube-logging.svc"
  issuerRef:
    kind: ClusterIssuer
    group: cert-manager.io
    name: tmaxcloud-issuer
